
'''
The ngCASA: Science Library functional API defines the functions that can become nodes in a Dask graph generated by the ngCASA: Graph Infrastructure Library. The  ngCASA: Science Library API consists of two kinds of functions:

- Fundamental Chunk Function can either be a pure Python function or a Python interface that wraps a function written in another language, such as C++, CUDA, Fortran, etc.
- A Composite Chunk Functions is a Python function that combines Fundamental Chunk Functions and other Composite Chunk Functions into a single function.

Both function types consist of serial CPU code with the option to include GPU code. If GPU code is used the function must be annotated when it is used in graph creation.

The majority of chunk functions process a sub-selection of the input data (called a chunk) independently from each other. The sub-selection can be done in any combination of axes of the data, for example, time, baseline, and channel. If a use case can not be decomposed into perfectly parallel chunk functions it will have to be split into more than one chunk function and the ngCASA: Graph Infrastructure Library will have to do the appropriate gather and scatter operations.

Note that fundamental chunk functions can be made up of other functions or classes that are shared with other fundamental chunk functions or composite chunk functions. These shared functions or classes (called utilities) however are not part of the
ngCASA: Science Library API and consequently can not become graph nodes on their own.
'''

def reconstruct_cube_image_chunk(vis_mds_chunk, mds_sel_parms_chunk, chunk_function_input_parms):
    '''
    Composite Chunk Function
    Use case : Non-interactive cube image reconstruction Major and minor cycles are run together within a node, for optimal data/image locality.
    '''
    
    ## Call the major/minor cycle sequence with iteration control.
    ## Return dictionaries are part of the in/out data structures.

    img_ds_chunk = None
    while( ! has_converged(img_ds_chunk) ):
        img_ds_chunk = run_major_cycle_chunk(mds_chunk, img_ds_chunk, chunk_function_input_parms[‘major’])
        img_ds_chunk= run_minor_cycle_chunk(img_ds_chunk, chunk_function_input_parms[‘minor’])

    return img_ds_chunk

    

def run_major_cycle_chunk(vis_mds_chunk, img_ds_chunk, chunk_function_input_parms)
    '''
        Composite Chunk Function
        Run only the major cycle
    '''
        # Depending on the use case and stage of the processing some of these functions can be no-ops or contain no-ops.
    
        vis_mds_chunk = degrid_chunk(vis_mds_chunk,img_ds_chunk,chunk_function_input_parms)
    
        vis_mds_chunk = prepare_data_chunk(vis_mds_chunk,chunk_function_input_parms) #polarization conversion, frequency frame conversion, phase shift, frequency interpolation.
        
        vis_mds_chunk = calc_weight_parms_chunk(vis_mds_chunk,chunk_function_input_parms) #The weight parameters are added as an attribute to the vis_mds_chunk.
        vis_mds_chunk = calc_imaging_weights_chunk(vis_mds_chunk) #Imaging weights are added as a new data variable.
        
        img_ds_chunk = make_psf_chunk(vis_mds_chunk,img_ds_chunk,chunk_function_input_parms)
        gcf_ds_chunk = make_gcf_chunk(vis_mds_chunk,chunk_function_input_parms)
        img_ds_chunk = make_pb_chunk(vis_mds_chunk,img_ds_chunk,gcf_ds_chunk,chunk_function_input_parms)
        
        img_ds_chunk = make_grid_chunk(vis_mds_chunk,img_ds_chunk,gcf_ds_chunk,chunk_function_input_parms)
        img_ds_chunk = fft_chunk(img_ds_chunk,chunk_function_input_parms)
        img_ds_chunk = normalize_chunk(img_ds_chunk,gcf_ds_chunk,chunk_function_input_parms)
        
        return img_ds_chunk, vis_mds_chunk
    
def run_minor_cycle_chunk(img_ds_chunk, chunk_function_input_parms)
        '''
        Composite Chunk Function
        Run only the minor cycle : deconvolution (and restoration)
        '''
        # Depending on the use case and stage of the processing some of these functions can be no-ops or contain no-ops.
        
        img_ds_chunk = update_mask_chunk(img_ds_chunk,chunk_function_input_parms)
        img_ds_chunk = deconvolve_chunk(img_ds_chunk,chunk_function_input_parms)
        img_ds_chunk = denormalize_chunk(img_ds_chunk,chunk_function_input_parms)
        img_ds_chunk = restore(img_ds_chunk,chunk_function_input_parms)
        
        return img_ds_chunk

def sum_img_ds_chunk(img_ds_chunk)
    '''
        Implement the math for the image gather step.
    '''



def combine_return_dict(return_dict):
    '''
        Combines return dictionaries.
    '''
